/*
 * InputAgent.java
 *
 * Created on August 2, 2005, 6:34 PM
 */

package org.slage.ui;

import java.awt.Toolkit;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import org.slage.SlageGame;
import org.slage.SlageObject;
import org.slage.command.Command;
import org.slage.command.Commander;
import org.slage.framework.Point3D;

/**
 * Handles the receiving and dispersing of clicks (and keyboard buttons) to the
 * command handler.
 * 
 * @author <a href="mailto:Matt@SQ7.org">Matt Holden</a>
 */
public class InputAgent implements MouseListener, KeyListener, Commander {

    // TODO: Duplicated in ConsolePanel - one needs to go. Make it a game state?
    /** Prefix for an "internal" verb */
    public static final String INTERNAL_VERB_PREFIX = "__";

    /**
     * Creates a new instance of InputAgent
     * 
     * @param theGame
     *            game to link to
     */
    public InputAgent(SlageGame theGame) {
        this.game = theGame;
    }

    /**
     * Convert a mouse event into a Point3D.
     * 
     * @param event
     *            MouseEvent
     * @return a Point3D (ignoring the z)
     */
    public static Point3D getClickPoint(MouseEvent event) {
        return new Point3D(event.getX(), event.getY(), 0);
    }

    /**
     * Scale the width of a click
     * 
     * @param evt
     *            Mouse Event
     * @return scaled X
     */
    private int scaleX(java.awt.event.MouseEvent evt) {
        // use floats for better math - convert to int at the end
        float fX = evt.getX();

        // get appropriate window size
        float fWindow = 0;
        if (game.isFullScreen())
            fWindow = Toolkit.getDefaultToolkit().getScreenSize().width;
        else
            fWindow = game.getFrame().getBounds().width;

        java.awt.Rectangle rView = game.getViewport();

        fX = rView.x + (rView.width * (fX / fWindow));
        return (int) fX;
    }

    /**
     * Scale the height of a click
     * 
     * @param evt
     *            Mouse Event
     * @return scaled Y
     */
    private int scaleY(java.awt.event.MouseEvent evt) {
        // use floats for better math - convert to int at the end
        float fY = evt.getY();

        // get appropriate window size
        float fWindow = 0;
        if (game.isFullScreen())
            fWindow = Toolkit.getDefaultToolkit().getScreenSize().height;
        else
            fWindow = game.getFrame().getBounds().height;

        java.awt.Rectangle rView = game.getViewport();

        fY = rView.y + (rView.height * (fY / fWindow));
        return (int) fY;
    }

    /***************************************************************************
     * MouseListener support
     **************************************************************************/

    /**
     * Called when the mouse is clicked on our GameCanvas.
     * 
     * @param mouseEvent
     *            mouse event generated by the click
     */
    public void mouseClicked(java.awt.event.MouseEvent mouseEvent) {
        if (game == null | game.getToolbar() == null)
            return;

        /** Don't allow clicks when the game is paused */
        if (game.isPaused() || game.getRoom() == null)
            return;

        int X = scaleX(mouseEvent);
        int Y = scaleY(mouseEvent);

        VerbButton VB = game.getToolbar().getSelectedTool();
        if (VB == null) {
            game.getToolbar().selectFirstVerbButton();
            VB = game.getToolbar().getSelectedTool();
            if (VB == null)
                return;
        }

        SlageObject objClicked = game.getRoom().getClickedObject(X, Y);

        // generate command
        Command command = null;

        if (VB instanceof ObjectButton)
            command = new Command(VB.getVerb(),
                    ((ObjectButton) VB).getObject(), objClicked, this);
        else
            command = new Command(VB.getVerb(), objClicked, null, this);

        command.fire();

    }

    /**
     * Called when the mouse enters the GLCanvas - empty function
     * 
     * @param mouseEvent
     *            event generated by the action
     */
    public void mouseEntered(MouseEvent mouseEvent) {
        // TODO implement me, or use an adapter
    }

    /**
     * Called when the mouse exits the GLCanvas - empty function
     * 
     * @param mouseEvent
     *            event generated by the action
     */
    public void mouseExited(MouseEvent mouseEvent) {
        //TODO implement me, or use an adapter
    }

    /**
     * Called when the mouse button is pressed on the GLCanvas - empty function
     * 
     * @param mouseEvent
     *            event generated by the action
     */
    public void mousePressed(MouseEvent mouseEvent) {
        // TODO implement me, or use an adapter
    }

    /**
     * Called when the mouse is released on the GLCanvas - empty function
     * 
     * @param mouseEvent
     *            event generated by the action
     */
    public void mouseReleased(MouseEvent mouseEvent) {
        // TODO implement me, or use an adapter
    }

    /***************************************************************************
     * KeyListener support
     **************************************************************************/

    /**
     * Called when a key is pressed
     * 
     * @param keyEvent
     *            event generated by the key
     */
    public void keyPressed(java.awt.event.KeyEvent keyEvent) {

        java.util.ArrayList khandlers = game.getKeyHandlers();
        for (int i = 0; i < khandlers.size(); i++) {
            KeyHandler KH = (KeyHandler) khandlers.get(i);
            KH.fire(keyEvent);
        }

        java.util.ArrayList handlers = game.getAsyncActions();
        for (int i = 0; i < handlers.size(); i++) {
            AsyncKeyAction AKA = (AsyncKeyAction) handlers.get(i);
            AKA.keyPressed(keyEvent);
        }
    }

    /**
     * Called when a key is released
     * 
     * @param keyEvent
     *            event generated by the key
     */
    public void keyReleased(java.awt.event.KeyEvent keyEvent) {
        java.util.ArrayList handlers = game.getAsyncActions();
        for (int i = 0; i < handlers.size(); i++) {
            AsyncKeyAction AKA = (AsyncKeyAction) handlers.get(i);
            AKA.keyReleased(keyEvent);
        }
    }

    /**
     * Called when a key is typed (pushed and released)
     * 
     * @param keyEvent
     *            event generated by the key
     */
    public void keyTyped(java.awt.event.KeyEvent keyEvent) {
        java.util.ArrayList handlers = game.getKeyHandlers();
        for (int i = 0; i < handlers.size(); i++) {
            KeyHandler KH = (KeyHandler) handlers.get(i);
            KH.fire(keyEvent);
        }

    }

    /** the game we're linked to */
    private SlageGame game;

    /**
     * Get the game we work for
     * 
     * @return game
     */
    public SlageGame getGame() {
        return game;
    }

}
/*******************************************************************************
 * BEGIN LICENSE BLOCK **** Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 * 
 * The Original Code is Slage.
 * 
 * The Initial Developer of the Original Code is The SQ7.org project. Portions
 * created by the Initial Developer are Copyright (C) 2005 the Initial
 * Developer. All Rights Reserved.
 * 
 * Contributor(s): Matt Holden (Matt@sq7.org) Travis Savo (Travis@sq7.org)
 * Robert Wenner (Robert@sq7.org) Jared Cope (Jared@sq7.org) Colin Davis
 * (Colin@sq7.org)
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or the
 * GNU Lesser General Public License Version 2.1 or later (the "LGPL"), in which
 * case the provisions of the GPL or the LGPL are applicable instead of those
 * above. If you wish to allow use of your version of this file only under the
 * terms of either the GPL or the LGPL, and not to allow others to use your
 * version of this file under the terms of the MPL, indicate your decision by
 * deleting the provisions above and replace them with the notice and other
 * provisions required by the GPL or the LGPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under the
 * terms of any one of the MPL, the GPL or the LGPL.
 * 
 ******************************************************************************/
